
import java.awt.Color;

public class PhotoMagic {

    // Static nested LFSR class
    public static class LFSR {
        String seed;
        int tap;

        // Creates an LFSR with the specified seed and tap
        public LFSR(String seed, int tap) {
            this.seed = seed;
            this.tap = tap;
        }

        // Returns the number of bits in the LFSR
        public int length() {
            return seed.length();
        }

        // Returns bit i as 0 or 1, adjusted for reverse order
        public int bitAt(int i) {
            return seed.charAt(i) == '1' ? 1 : 0;
        }

        // Returns a string representation of this LFSR
        public String toString() {
            return seed;
        }

        // Simulates one step of this LFSR and returns the new bit as 0 or 1
        public int step() {
            // XOR the bit at the tap position (9th from the right) and the rightmost bit (0th bit)
            int bit = bitAt(length() - tap) ^ bitAt(0);
            seed = seed.substring(1) + bit;
            return bit;
        }

        // Simulates k steps of this LFSR and returns the k bits as a k-bit integer
        public int generate(int k) {
            int x = 0;
            for (int i = 0; i < k; i++) {
                int bit = step();
                x = 2 * x + bit;
            }
            return x;
        }
    }

    // Returns a transformed copy of the specified picture, using the specified LFSR
    public static Picture transform(Picture picture, LFSR lfsr) {
        int width = picture.width();
        int height = picture.height();
        Picture newPicture = new Picture(width, height);

        for (int col = 0; col < width; col++) {
            for (int row = 0; row < height; row++) {
                // Get the pixel color
                Color color = picture.get(col, row);

                // Extract red, green, and blue components
                int red = color.getRed();
                int green = color.getGreen();
                int blue = color.getBlue();

                // XOR each component with an 8-bit value generated by the LFSR
                int newRed = red ^ lfsr.generate(8);
                int newGreen = green ^ lfsr.generate(8);
                int newBlue = blue ^ lfsr.generate(8);

                // Create a new color from the transformed components
                Color newColor = new Color(newRed, newGreen, newBlue);

                // Set the transformed color in the new picture
                newPicture.set(col, row, newColor);
            }
        }

        return newPicture;
    }

    // Takes the name of an image file and a description of an LFSR as command-line arguments;
    // Displays a copy of the image that is "encrypted" using the LFSR.
    public static void main(String[] args) {
        // Read command-line arguments
        String filename = args[0];
        String seed = args[1];
        int tap = Integer.parseInt(args[2]);

        // Load the picture
        Picture picture = new Picture(filename);

        // Create the LFSR
        LFSR lfsr = new LFSR(seed, tap);

        // Transform the picture
        Picture transformedPicture = transform(picture, lfsr);

        // Display the transformed picture
        transformedPicture.show();
    }
}
